@page "/"
@using Microsoft.Extensions.Logging
@using Mowrer.WVCC.Challenges.PasswordGenerator.Data
@using System.Linq
@using System.Text
@inject ILogger<Index> _logger

@* <PageTitle>Index</PageTitle> *@

<h1>Simple Password Generator</h1>

<EditForm Model="@passwordOptionsModel" OnValidSubmit="@HandleSubmit">
    <DataAnnotationsValidator />
    <ValidationSummary />
    
    <div class="mb-3">
        <label class="form-label" for="length">
            Password Length
        </label>
        <InputNumber id="length" @bind-Value="passwordOptionsModel.Length" class="form-control" />
    </div>

    <div class="form-check">
        <InputCheckbox id="with-digits" @bind-Value="passwordOptionsModel.WithDigits" class="form-check-input" />
        <label class="form-check-label" for="with-digits">
            Include Digits
        </label>
    </div>

    
    <div class="form-check">
        <InputCheckbox id="with-symbols" @bind-Value="passwordOptionsModel.WithSymbols" class="form-check-input" />
        <label class="form-check-label" for="with-symbols">
            Include Symbols
        </label>
    </div>

    <button type="submit" class="btn btn-primary">Submit</button>
</EditForm>

@if (password != null)
{
    <div>
        <p>Your random password is: @password</p>
    </div>
}

@code {
    private PasswordOptionsModel passwordOptionsModel = new();

    private string? password;
    
    private readonly Random rng = new Random();
    
    // Unicode codes for uppercase A-Z
    private readonly IEnumerable<int> UppercaseLetterCodes = Enumerable.Range(65, 26);
    
    // Unicode codes for lowercase a-z
    private readonly IEnumerable<int> LowercaseLetterCodes = Enumerable.Range(97, 26);
    
    // Unicode codes for digits 0-9
    private readonly IEnumerable<int> DigitCodes = Enumerable.Range(48, 10);
    
    // Unicode codes for symbols
    private readonly IEnumerable<int> SymbolCodes =
        Enumerable.Range(33, 15) // Exclamation mark (!) through full stop (.)
            .Concat(Enumerable.Range(58, 7)) // Colon (:) through at sign (@)
            .Concat(Enumerable.Range(91, 6)) // Left square bracket ([) through grave (`)
            .Concat(Enumerable.Range(123, 4)); // Left curly bracket ({) through tilde (~)

    private int GetRandomCharacterCode(ICollection<int> alphabet, int? previousCharCode = null)
    {
        int charCode;

        do
        {
            var index = rng.Next(0, alphabet.Count);
            charCode = alphabet.ElementAt(index);
        }
        while (charCode == previousCharCode);

        return charCode;
    }

    private string GeneratePassword(ICollection<int> alphabet, int length)
    {
        // Generate the requested number of characters
        var randomChars = Enumerable.Range(0, length)
            // Select a random character code
            .Select((unused) => GetRandomCharacterCode(alphabet))
            // Convert each code into a character
            .Select(char.ConvertFromUtf32);

        // Join the characters into a string
        var randomPassword = string.Join("", randomChars);

        return randomPassword;
    }

    private void HandleSubmit()
    {
        // Start with alphabet of lower and upper-case chars
        var alphabet = UppercaseLetterCodes.Concat(LowercaseLetterCodes);

        // Add in digits and symbols if requested
        if (passwordOptionsModel.WithDigits)
            alphabet = alphabet.Concat(DigitCodes);

        if (passwordOptionsModel.WithSymbols)
            alphabet = alphabet.Concat(SymbolCodes);

        // Convert 
        var alphabetList = alphabet.ToList();

        _logger.LogInformation("Hey");
        
        password = GeneratePassword(alphabetList, passwordOptionsModel.Length.Value);
    }
}